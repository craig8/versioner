name: versioner
description: Determines the next version software release version based upon criteria
inputs:
  default-git-tag: 
    description: The default version if there are not any releases yet
    required: true
    default: 'v0.0.1'
outputs:
  new-git-tag: # id of output
    description: The new tag that should be published
  new-version:
    description: The new version number that should be used

runs:
  using: composite
  steps: 
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python
      id: setup-python
      uses: actions/setup-python@v4
    
    - name: Install Poetry
      uses: snok/install-poetry@v1.3.3
      with:
        version: 1.4
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
                   
    - name: Determine the current release based on git tags
      shell: bash
      run: |       
        # current_git_tag is the last tagged relese in the repository.   From there
        # we need to remove the v from the begining of the tag.
        if ! $(git tag -l "v*" = ''); then
          # uses -V which is version sort to keep it monotonically increasing.
          current_git_tag=$(git tag -l "v*" | grep --invert-match '-' | sort --reverse -V  | sed -n 1p)
        else
          current_git_tag="${{ inputs.default-git-tag }}"
        fi

        current_git_tag=${current_git_tag#?}

        echo "The current tag is ${current_git_tag}"

        # current_git_tag is now the version we want to set our poetry version so
        # that we can bump the version
        # poetry version ${current_git_tag}
        # poetry version prerelease --no-interaction

        #NEW_TAG=v$(poetry version --short)

        # Finally because we want to be able to use the variable in later
        # steps we set a NEW_TAG environmental variable
        echo "NEW_TAG=$(echo ${NEW_TAG})" >> $GITHUB_ENV