name: versioner
description: Determines the next version software release version based upon criteria
inputs:
  default-git-tag: 
    description: The default version if there are not any releases yet
    required: true
    default: 'v0.0.1'
  python-version:
    description: The python version for the base to utilize
    required: true
    default: '3.10'
  enable-github-release:
    description: Enable releasing to github using bumped version
    required: true
    default: false
  is-prerelease:
    description: Is this a pre-release on github?
  github-token:
    description: Token for use to create the release on github
    required: false
    default: ''
  enable-publish-pypi:
    description: Enable publishing to pypi using bumped version
    required: true
    default: false
  pypi-token:
    description: Pypi token to use to publish.
    required: false
    default: ''
  
  
outputs:
  new-version:
    description: The new version number that should be used
    value: ${{ steps.new-version.outputs.NEW_VERSION }}

runs:
  using: composite
  steps: 
    - name: "Whats the path?"
      id: runner-path
      run: |
        echo "ACTION_PATH=${{ github.action_path }}" >> "$GITHUB_OUTPUT"
      shell: bash

    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}

    - name: Install semver
      shell: bash
      run: pip install semver
        
    - name: Install Poetry
      uses: snok/install-poetry@v1.3.3
      with:
        # version: 1.4
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
        
    # - name: Dump GitHub context
    #   shell: bash
    #   run: echo '${{ toJSON(github) }}'
    # - name: Dump job context
    #   run: echo '${{ toJSON(job) }}'
    # - name: Dump steps context
    #   run: echo '${{ toJSON(steps) }}'
    # - name: Dump runner context
    #   run: echo '${{ toJSON(runner) }}'
    # - name: Dump strategy context
    #   run: echo '${{ toJSON(strategy) }}'
    # - name: Dump matrix context
    #   run: echo '${{ toJSON(matrix) }}'
                   
    - name: Determine the new version based upon github releases that start with v
      id: new-version
      shell: bash
      run: |
        # Use the output from before checkout for the location of the bump_version.py file.
        PY_BUMP="${{ steps.runner-path.outputs.ACTION_PATH }}/bump_version.py"

        # Initial version if nothing has been released yet.
        default_version="${{ inputs.default-git-tag }}"

        if [[ ${default_version:0:1} != 'v' ]]; then
          echo "default-git-tag must start with v"
          exit 1
        fi

        # current_git_tag is the last tagged relese in the repository.   From there
        # we need to remove the v from the begining of the tag.
        results=$(git tag -l "v*" = '')
        if [[ $results == '' ]]; then
            current_git_tag="${default_version}"
        else
            # uses -V which is version sort to keep it monotonically increasing.
            current_git_tag=$(git tag -l "v*" | grep --invert-match '-' | sort --reverse -V  | sed -n 1p)
        fi

        # The two are the same so we are using the default
        if [[ "${current_git_tag}" == "${default_version}" ]] ; then
          my_new_version="${default_version#?}"
        else
          my_new_version=$(python ${PY_BUMP} ${{inputs.default-git-tag}} --git-version ${current_git_tag})
        fi
        
        echo "New version is: ${my_new_version}"

        # current_git_tag is now the version we want to set our poetry version so
        # that we can bump the version
        # poetry version ${current_git_tag}
        # poetry version prerelease --no-interaction

        #NEW_TAG=v$(poetry version --short)

        # Finally because we want to be able to use the variable in later
        # steps we set a NEW_TAG environmental variable
        #echo "NEW_TAG=$(echo ${NEW_TAG})" >> $GITHUB_ENV
        echo "NEW_VERSION=${my_new_version}" >> $GITHUB_OUTPUT

    - name: If enabled release version
      if: ${{ INPUT_ENABLE_GITHUB_RELEASE }}
      run: |
        echo "Github release enabled"
        if [[ "${{ INPUT_GITHUB_TOKEN }}" != '' ]]; then
          echo "Github token is set"
        else
          echo "Github token not set"
        fi
    - name: If enabled pypi release
      if: ${{ INPUT_ENABLE_PUBLISH_PYPI }}
      run: |
        echo "PUBLISH pypi enabled"
        if [[ "${{ INPUT_PYPI_TOKEN }}" != '' ]]; then
          echo "PYPI token is set"
        else
          echo "PYPI token not set"
        fi