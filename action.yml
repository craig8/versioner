name: versioner
description: Determines the next version software release version based upon criteria
inputs:
  default-git-tag: 
    description: The default version if there are not any releases yet
    required: true
    default: 'v0.0.1'
  python-version:
    description: The python version for the base to utilize
    required: true
    default: '3.10'
outputs:
  new-git-tag: # id of output
    description: The new tag that should be published
  new-version:
    description: The new version number that should be used

runs:
  using: composite
  steps: 
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}

    - name: Install semver
      shell: bash
      run: pip install semver
        
    - name: Install Poetry
      uses: snok/install-poetry@v1.3.3
      with:
        # version: 1.4
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
                   
    - name: Determine the current release based on git tags
      shell: bash
      run: |
        # Initial version if nothing has been released yet.
        default_version="${{ inputs.default-git-tag }}"

        if [[ ${default_version[0]} != 'v' ]] then
          echo "default-git-tag must start with v"
          exit 1
        fi

        # current_git_tag is the last tagged relese in the repository.   From there
        # we need to remove the v from the begining of the tag.
        results=$(git tag -l "v*" = '')
        if [[ $results == '' ]]; then
            current_git_tag="${default_version}"
        else
            # uses -V which is version sort to keep it monotonically increasing.
            current_git_tag=$(git tag -l "v*" | grep --invert-match '-' | sort --reverse -V  | sed -n 1p)
        fi

        # The two are the same so we are using the default
        if [[ "${current_git_tag}" == "${default_version}" ]] ; then
          my_new_versions="${default_version}"
        else
          my_new_versions=$(python bump_version.py ${{inputs.default-git-tag}}, ${current_git_tag})
        fi
        
        IFS=' '

        read -a strarr <<< "$my_new_versions"

        new_git_tag=$strarr[0]
        new_poetry_version=$strarr[1]

        echo "$new_git_tag and $new_poetry_version"

        # current_git_tag is now the version we want to set our poetry version so
        # that we can bump the version
        # poetry version ${current_git_tag}
        # poetry version prerelease --no-interaction

        #NEW_TAG=v$(poetry version --short)

        # Finally because we want to be able to use the variable in later
        # steps we set a NEW_TAG environmental variable
        #echo "NEW_TAG=$(echo ${NEW_TAG})" >> $GITHUB_ENV